// Generated by purs version 0.15.15
import * as $foreign from "./foreign.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Nullable from "../Data.Nullable/index.js";
import * as Data_Posix_Signal from "../Data.Posix.Signal/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Uncurried from "../Effect.Uncurried/index.js";
import * as Foreign_Object from "../Foreign.Object/index.js";
import * as Node_EventEmitter from "../Node.EventEmitter/index.js";
import * as Node_Platform from "../Node.Platform/index.js";
var show = /* #__PURE__ */ Data_Show.show(/* #__PURE__ */ Data_Show.showRecord()()(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "system";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsConsNil({
    reflectSymbol: function () {
        return "user";
    }
})(Data_Show.showInt))(Data_Show.showInt)));
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var map = /* #__PURE__ */ Data_Functor.map(Effect.functorEffect);
var CpuUsage = function (x) {
    return x;
};
var showCpuUsage = {
    show: function (v) {
        return "(CpuUsage " + (show(v) + ")");
    }
};
var eqCpuUsage = {
    eq: function (x) {
        return function (y) {
            return x.system === y.system && x.user === y.user;
        };
    }
};
var workerH = /* #__PURE__ */ (function () {
    return new Node_EventEmitter.EventHandle("worker", Effect_Uncurried.mkEffectFn1);
})();
var warningH = /* #__PURE__ */ (function () {
    return new Node_EventEmitter.EventHandle("warning", Effect_Uncurried.mkEffectFn1);
})();
var unsetEnv = function (key) {
    return function () {
        return $foreign.unsetEnvImpl(key);
    };
};
var unsafeSendOptsCb = function () {
    return function (msg) {
        return function (handle) {
            return function (opts) {
                return function (cb) {
                    return function () {
                        return $foreign.sendOptsCbImpl(msg, handle, opts, function (err) {
                            return cb(Data_Nullable.toMaybe(err))();
                        });
                    };
                };
            };
        };
    };
};
var unsafeSendOpts = function () {
    return function (msg) {
        return function (handle) {
            return function (opts) {
                return function () {
                    return $foreign.sendOptsImpl(msg, handle, opts);
                };
            };
        };
    };
};
var unsafeSendCb = function (msg) {
    return function (handle) {
        return function (cb) {
            return function () {
                return $foreign.sendCbImpl(msg, handle, function (err) {
                    return cb(Data_Nullable.toMaybe(err))();
                });
            };
        };
    };
};
var unsafeSend = function (msg) {
    return function (handle) {
        return function () {
            return $foreign.sendImpl(msg, handle);
        };
    };
};
var unhandledRejectionH = /* #__PURE__ */ (function () {
    return new Node_EventEmitter.EventHandle("unhandledRejection", function (cb) {
        return function (a, b) {
            return cb(a)(b)();
        };
    });
})();
var uncaughtExceptionH = /* #__PURE__ */ (function () {
    return new Node_EventEmitter.EventHandle("uncaughtException", function (cb) {
        return function (a, b) {
            return cb(a)(b)();
        };
    });
})();
var setUncaughtExceptionCaptureCallback = function (cb) {
    return function () {
        return $foreign.setUncaughtExceptionCaptureCallbackImpl(cb);
    };
};
var setTitle = function (newTitle) {
    return function () {
        return $foreign.setTitleImpl(newTitle);
    };
};
var setExitCode = function (code) {
    return function () {
        return $foreign.setExitCodeImpl(code);
    };
};
var setEnv = function (key) {
    return function (value) {
        return function () {
            return $foreign.setEnvImpl(key, value);
        };
    };
};
var rejectionHandledH = /* #__PURE__ */ (function () {
    return new Node_EventEmitter.EventHandle("rejectionHandled", Effect_Uncurried.mkEffectFn1);
})();
var platform = /* #__PURE__ */ Node_Platform.fromString($foreign.platformStr);
var nextTick$prime = function (cb) {
    return function (args) {
        return function () {
            return $foreign.nextTickCbImpl(Effect_Uncurried.mkEffectFn1(cb), args);
        };
    };
};
var nextTick = function (cb) {
    return function () {
        return $foreign.nextTickImpl(cb);
    };
};
var mkSignalH$prime = function (sig) {
    return new Node_EventEmitter.EventHandle(Data_String_Common.toUpper(sig), identity);
};
var mkSignalH = function (sig) {
    return new Node_EventEmitter.EventHandle(Data_Posix_Signal.toString(sig), identity);
};
var messageH = /* #__PURE__ */ (function () {
    return new Node_EventEmitter.EventHandle("message", function (cb) {
        return function (a, b) {
            return cb(a)(Data_Nullable.toMaybe(b))();
        };
    });
})();
var lookupEnv = function (k) {
    return map(Foreign_Object.lookup(k))($foreign.unsafeGetEnv);
};
var killStr = function (p) {
    return function (sig) {
        return function () {
            return $foreign.killStrImpl(p, sig);
        };
    };
};
var killInt = function (p) {
    return function (sig) {
        return function () {
            return $foreign.killIntImpl(p, sig);
        };
    };
};
var kill = function (p) {
    return function () {
        return $foreign.killImpl(p);
    };
};
var getUid = /* #__PURE__ */ map(Data_Nullable.toMaybe)($foreign.getUidImpl);
var getGid = /* #__PURE__ */ map(Data_Nullable.toMaybe)($foreign.getGidImpl);
var getExitCode = /* #__PURE__ */ map(Data_Nullable.toMaybe)($foreign.getExitCodeImpl);
var exitH = /* #__PURE__ */ (function () {
    return new Node_EventEmitter.EventHandle("exit", Effect_Uncurried.mkEffectFn1);
})();
var exit$prime = function (code) {
    return function () {
        return $foreign.exitImpl(code);
    };
};
var disconnectH = /* #__PURE__ */ (function () {
    return new Node_EventEmitter.EventHandle("disconnect", identity);
})();
var disconnect = /* #__PURE__ */ Data_Nullable.toMaybe($foreign.disconnectImpl);
var cpuUsageToRecord = function (v) {
    return v;
};
var cpuUsageDiff = function (prev) {
    return function () {
        return $foreign.cpuUsageDiffImpl(prev);
    };
};
var chdir = function (dir) {
    return function () {
        return $foreign.chdirImpl(dir);
    };
};
var channelUnref = /* #__PURE__ */ Data_Nullable.toMaybe($foreign.channelUnrefImpl);
var channelRef = /* #__PURE__ */ Data_Nullable.toMaybe($foreign.channelRefImpl);
var beforeExitH = /* #__PURE__ */ (function () {
    return new Node_EventEmitter.EventHandle("beforeExit", Effect_Uncurried.mkEffectFn1);
})();
var abort = /* #__PURE__ */ Data_Nullable.toMaybe($foreign.abortImpl);
export {
    process,
    argv,
    argv0,
    config,
    connected,
    cpuUsage,
    cwd,
    debugPort,
    getEnv,
    execArgv,
    execPath,
    exit,
    hasUncaughtExceptionCaptureCallback,
    memoryUsage,
    memoryUsageRss,
    pid,
    platformStr,
    ppid,
    resourceUsage,
    clearUncaughtExceptionCaptureCallback,
    stdin,
    stdout,
    stderr,
    stdinIsTTY,
    stdoutIsTTY,
    stderrIsTTY,
    getTitle,
    uptime,
    version
} from "./foreign.js";
export {
    beforeExitH,
    disconnectH,
    exitH,
    messageH,
    rejectionHandledH,
    uncaughtExceptionH,
    unhandledRejectionH,
    mkSignalH,
    mkSignalH$prime,
    warningH,
    workerH,
    abort,
    channelRef,
    channelUnref,
    chdir,
    cpuUsageToRecord,
    cpuUsageDiff,
    disconnect,
    lookupEnv,
    setEnv,
    unsetEnv,
    exit$prime,
    setExitCode,
    getExitCode,
    getGid,
    getUid,
    kill,
    killStr,
    killInt,
    nextTick,
    nextTick$prime,
    platform,
    unsafeSend,
    unsafeSendOpts,
    unsafeSendCb,
    unsafeSendOptsCb,
    setUncaughtExceptionCaptureCallback,
    setTitle,
    eqCpuUsage,
    showCpuUsage
};
