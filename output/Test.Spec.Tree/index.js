// Generated by purs version 0.15.15
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_State from "../Control.Monad.State/index.js";
import * as Control_Monad_State_Class from "../Control.Monad.State.Class/index.js";
import * as Control_Monad_State_Trans from "../Control.Monad.State.Trans/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Array_NonEmpty from "../Data.Array.NonEmpty/index.js";
import * as Data_Bifunctor from "../Data.Bifunctor/index.js";
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_HeytingAlgebra from "../Data.HeytingAlgebra/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var map1 = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);
var foldr = /* #__PURE__ */ Data_Foldable.foldr(Data_Foldable.foldableArray);
var foldl = /* #__PURE__ */ Data_Foldable.foldl(Data_Foldable.foldableArray);
var map2 = /* #__PURE__ */ Data_Functor.map(Data_Either.functorEither);
var showRecord = /* #__PURE__ */ Data_Show.showRecord()();
var indexIsSymbol = {
    reflectSymbol: function () {
        return "index";
    }
};
var nameIsSymbol = {
    reflectSymbol: function () {
        return "name";
    }
};
var append1 = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);
var un = /* #__PURE__ */ Data_Newtype.un();
var lmap = /* #__PURE__ */ Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither);
var show = /* #__PURE__ */ Data_Show.show(/* #__PURE__ */ showRecord(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "example";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "isFocused";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsConsNil({
    reflectSymbol: function () {
        return "isParallelizable";
    }
})(/* #__PURE__ */ Data_Maybe.showMaybe(Data_Show.showBoolean)))(Data_Show.showBoolean))(Data_Show.showString)));
var eq1 = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Maybe.eqMaybe(Data_Eq.eqBoolean));
var all = /* #__PURE__ */ Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean);
var bind = /* #__PURE__ */ Control_Bind.bind(Data_Maybe.bindMaybe);
var applicativeStateT = /* #__PURE__ */ Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity);
var for_ = /* #__PURE__ */ Data_Foldable.for_(applicativeStateT)(Data_Foldable.foldableArray);
var modify_ = /* #__PURE__ */ Control_Monad_State_Class.modify_(/* #__PURE__ */ Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity));
var $$for = /* #__PURE__ */ Data_Traversable["for"](applicativeStateT)(Data_Traversable.traversableArray);
var Node = /* #__PURE__ */ (function () {
    function Node(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Node.create = function (value0) {
        return function (value1) {
            return new Node(value0, value1);
        };
    };
    return Node;
})();
var Leaf = /* #__PURE__ */ (function () {
    function Leaf(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Leaf.create = function (value0) {
        return function (value1) {
            return new Leaf(value0, value1);
        };
    };
    return Leaf;
})();
var PathItem = function (x) {
    return x;
};
var Item = function (x) {
    return x;
};
var showTree = function (dictShow) {
    return function (dictShow1) {
        var show1 = Data_Show.show(Data_Maybe.showMaybe(dictShow1));
        return function (dictShow2) {
            var show2 = Data_Show.show(Data_Either.showEither(dictShow2)(dictShow));
            var show3 = Data_Show.show(dictShow2);
            return {
                show: function (v) {
                    if (v instanceof Node) {
                        return "(Node " + (show2(v.value0) + (" " + (Data_Show.show(Data_Show.showArray(showTree(dictShow)(dictShow1)(dictShow2)))(v.value1) + ")")));
                    };
                    if (v instanceof Leaf) {
                        return "(Leaf " + (show3(v.value0) + (" " + (show1(v.value1) + ")")));
                    };
                    throw new Error("Failed pattern match at Test.Spec.Tree (line 42, column 1 - line 44, column 69): " + [ v.constructor.name ]);
                }
            };
        };
    };
};
var functorTree = {
    map: function (f) {
        return function (m) {
            if (m instanceof Node) {
                return new Node(m.value0, map(Data_Functor.map(functorTree)(f))(m.value1));
            };
            if (m instanceof Leaf) {
                return new Leaf(m.value0, map1(f)(m.value1));
            };
            throw new Error("Failed pattern match at Test.Spec.Tree (line 0, column 0 - line 0, column 0): " + [ m.constructor.name ]);
        };
    }
};
var foldableTree = {
    foldr: function (v) {
        return function (v1) {
            return function (v2) {
                if (v2 instanceof Leaf) {
                    return Data_Maybe.maybe(v1)(function (a$prime) {
                        return v(a$prime)(v1);
                    })(v2.value1);
                };
                if (v2 instanceof Node) {
                    return foldr(function (a) {
                        return function (i$prime) {
                            return Data_Foldable.foldr(foldableTree)(v)(i$prime)(a);
                        };
                    })(v1)(v2.value1);
                };
                throw new Error("Failed pattern match at Test.Spec.Tree (line 68, column 1 - line 73, column 32): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
            };
        };
    },
    foldl: function (v) {
        return function (v1) {
            return function (v2) {
                if (v2 instanceof Leaf) {
                    return Data_Maybe.maybe(v1)(function (a$prime) {
                        return v(v1)(a$prime);
                    })(v2.value1);
                };
                if (v2 instanceof Node) {
                    return foldl(function (i$prime) {
                        return function (a) {
                            return Data_Foldable.foldl(foldableTree)(v)(i$prime)(a);
                        };
                    })(v1)(v2.value1);
                };
                throw new Error("Failed pattern match at Test.Spec.Tree (line 68, column 1 - line 73, column 32): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
            };
        };
    },
    foldMap: function (dictMonoid) {
        return function (f) {
            return Data_Foldable.foldMapDefaultL(foldableTree)(dictMonoid)(f);
        };
    }
};
var eqTree = function (dictEq) {
    return function (dictEq1) {
        var eq3 = Data_Eq.eq(Data_Maybe.eqMaybe(dictEq1));
        return function (dictEq2) {
            var eq4 = Data_Eq.eq(Data_Either.eqEither(dictEq2)(dictEq));
            var eq5 = Data_Eq.eq(dictEq2);
            return {
                eq: function (v) {
                    return function (v1) {
                        if (v instanceof Node && v1 instanceof Node) {
                            return eq4(v.value0)(v1.value0) && Data_Eq.eq(Data_Eq.eqArray(eqTree(dictEq)(dictEq1)(dictEq2)))(v.value1)(v1.value1);
                        };
                        if (v instanceof Leaf && v1 instanceof Leaf) {
                            return eq5(v.value0)(v1.value0) && eq3(v.value1)(v1.value1);
                        };
                        return false;
                    };
                }
            };
        };
    };
};
var bifunctorTree = {
    bimap: function (g) {
        return function (f) {
            return function (tree) {
                if (tree instanceof Node) {
                    return new Node(map2(g)(tree.value0), map(Data_Bifunctor.bimap(bifunctorTree)(g)(f))(tree.value1));
                };
                if (tree instanceof Leaf) {
                    return new Leaf(tree.value0, map1(f)(tree.value1));
                };
                throw new Error("Failed pattern match at Test.Spec.Tree (line 64, column 20 - line 66, column 33): " + [ tree.constructor.name ]);
            };
        };
    }
};
var showIdTerm = /* #__PURE__ */ showRecord(/* #__PURE__ */ Data_Show.showRecordFieldsCons(indexIsSymbol)(/* #__PURE__ */ Data_Show.showRecordFieldsConsNil(nameIsSymbol)(/* #__PURE__ */ Data_Maybe.showMaybe(Data_Show.showString)))(Data_Show.showInt));
var pathItemOrd = /* #__PURE__ */ Data_Ord.ordRecord()(/* #__PURE__ */ Data_Ord.ordRecordCons(/* #__PURE__ */ Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(nameIsSymbol)(/* #__PURE__ */ Data_Maybe.ordMaybe(Data_Ord.ordString)))()(indexIsSymbol)(Data_Ord.ordInt));
var pathItemEq = /* #__PURE__ */ Data_Eq.eqRec()(/* #__PURE__ */ Data_Eq.eqRowCons(/* #__PURE__ */ Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(nameIsSymbol)(/* #__PURE__ */ Data_Maybe.eqMaybe(Data_Eq.eqString)))()(indexIsSymbol)(Data_Eq.eqInt));
var parentSuite = /* #__PURE__ */ (function () {
    return Data_Function.flip(foldr)(Data_Maybe.Nothing.value)(function (v) {
        return function (v1) {
            if (v.name instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Nothing) {
                return new Data_Maybe.Just({
                    path: [  ],
                    name: v.name.value0
                });
            };
            if (v.name instanceof Data_Maybe.Nothing && v1 instanceof Data_Maybe.Nothing) {
                return Data_Maybe.Nothing.value;
            };
            if (v1 instanceof Data_Maybe.Just) {
                return new Data_Maybe.Just({
                    name: v1.value0.name,
                    path: append1([ v ])(v1.value0.path)
                });
            };
            throw new Error("Failed pattern match at Test.Spec.Tree (line 169, column 34 - line 172, column 55): " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
})();
var newtypePathItem = {
    Coercible0: function () {
        return undefined;
    }
};
var parentSuiteName = /* #__PURE__ */ Data_Array.mapMaybe(/* #__PURE__ */ (function () {
    var $223 = un(PathItem);
    return function ($224) {
        return (function (v) {
            return v.name;
        })($223($224));
    };
})());
var modifyAroundAction = function (action) {
    return function (v) {
        return {
            isFocused: v.isFocused,
            isParallelizable: v.isParallelizable,
            example: function (aroundAction) {
                return v.example(function ($225) {
                    return aroundAction(action($225));
                });
            }
        };
    };
};
var mapTreeAnnotations = function (f) {
    return function (v) {
        if (v instanceof Node) {
            return new Node(lmap(f)(v.value0), map(mapTreeAnnotations(f))(v.value1));
        };
        if (v instanceof Leaf) {
            return new Leaf(f(v.value0), v.value1);
        };
        throw new Error("Failed pattern match at Test.Spec.Tree (line 107, column 24 - line 109, column 27): " + [ v.constructor.name ]);
    };
};
var itemShow = {
    show: function (v) {
        return "Item (" + (show({
            isFocused: v.isFocused,
            isParallelizable: v.isParallelizable,
            example: "Function"
        }) + ")");
    }
};
var itemNewtype = {
    Coercible0: function () {
        return undefined;
    }
};
var itemEq = {
    eq: function (v) {
        return function (v1) {
            return v.isFocused === v1.isFocused && eq1(v.isParallelizable)(v1.isParallelizable);
        };
    }
};
var eq2 = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Maybe.eqMaybe(itemEq));
var isAllParallelizable = function (v) {
    if (v instanceof Node) {
        return all(isAllParallelizable)(v.value1);
    };
    if (v instanceof Leaf) {
        return eq2(v.value1)(Data_Maybe.Nothing.value) || eq1(bind(v.value1)((function () {
            var $226 = un(Item);
            return function ($227) {
                return (function (v1) {
                    return v1.isParallelizable;
                })($226($227));
            };
        })()))(new Data_Maybe.Just(true));
    };
    throw new Error("Failed pattern match at Test.Spec.Tree (line 134, column 23 - line 136, column 82): " + [ v.constructor.name ]);
};
var filterTree = function (f) {
    return function (v) {
        if (v instanceof Node) {
            var v1 = Data_Array.mapMaybe(filterTree(f))(v.value1);
            if (v1.length === 0) {
                return Data_Maybe.Nothing.value;
            };
            return new Data_Maybe.Just(new Node(v.value0, v1));
        };
        if (v instanceof Leaf) {
            if (f(v.value0)(v.value1)) {
                return new Data_Maybe.Just(new Leaf(v.value0, v.value1));
            };
            if (Data_Boolean.otherwise) {
                return Data_Maybe.Nothing.value;
            };
        };
        throw new Error("Failed pattern match at Test.Spec.Tree (line 115, column 16 - line 123, column 27): " + [ v.constructor.name ]);
    };
};
var filterTrees = function (f) {
    return Data_Array.mapMaybe(filterTree(f));
};
var discardUnfocused = function (ts) {
    var isFocused = function (v) {
        return function (v1) {
            if (v1 instanceof Data_Maybe.Just) {
                return v1.value0.isFocused;
            };
            if (v1 instanceof Data_Maybe.Nothing) {
                return false;
            };
            throw new Error("Failed pattern match at Test.Spec.Tree (line 147, column 5 - line 147, column 46): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
    var v = filterTrees(isFocused)(ts);
    if (v.length === 0) {
        return ts;
    };
    return v;
};
var countTests = function (g) {
    var go = function (v) {
        if (v instanceof Node) {
            return for_(v.value1)(go);
        };
        if (v instanceof Leaf) {
            return modify_(function (v1) {
                return v1 + 1 | 0;
            });
        };
        throw new Error("Failed pattern match at Test.Spec.Tree (line 129, column 3 - line 129, column 30): " + [ v.constructor.name ]);
    };
    return Control_Monad_State.execState($$for(g)(go))(0);
};
var bimapTreeWithPaths = function (g) {
    return function (f) {
        var go = function (namePath) {
            return function (spec) {
                if (spec instanceof Node) {
                    var namePath$prime = Data_Either.either(Data_Array.snoc(namePath))(Data_Function["const"](namePath))(spec.value0);
                    return new Node(map2(g(namePath$prime))(spec.value0), map(go(namePath$prime))(spec.value1));
                };
                if (spec instanceof Leaf) {
                    return new Leaf(spec.value0, map1(f(Data_Array_NonEmpty["snoc$prime"](namePath)(spec.value0)))(spec.value1));
                };
                throw new Error("Failed pattern match at Test.Spec.Tree (line 55, column 22 - line 61, column 64): " + [ spec.constructor.name ]);
            };
        };
        return go([  ]);
    };
};
var annotateWithPaths = /* #__PURE__ */ (function () {
    var go = function (path) {
        return function (index) {
            return function (v) {
                if (v instanceof Node) {
                    var name = Data_Either.either(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value))(v.value0);
                    var nextPath = append1(path)([ {
                        index: index,
                        name: name
                    } ]);
                    return new Node(lmap(function (v1) {
                        return new Data_Tuple.Tuple(v1, path);
                    })(v.value0), Data_Array.mapWithIndex(go(nextPath))(v.value1));
                };
                if (v instanceof Leaf) {
                    return new Leaf(new Data_Tuple.Tuple(v.value0, path), v.value1);
                };
                throw new Error("Failed pattern match at Test.Spec.Tree (line 96, column 21 - line 104, column 33): " + [ v.constructor.name ]);
            };
        };
    };
    return Data_Array.mapWithIndex(go([  ]));
})();
export {
    Item,
    PathItem,
    Node,
    Leaf,
    annotateWithPaths,
    bimapTreeWithPaths,
    countTests,
    discardUnfocused,
    filterTree,
    filterTrees,
    isAllParallelizable,
    mapTreeAnnotations,
    modifyAroundAction,
    parentSuite,
    parentSuiteName,
    functorTree,
    showTree,
    eqTree,
    bifunctorTree,
    foldableTree,
    itemNewtype,
    itemShow,
    itemEq,
    newtypePathItem,
    showIdTerm,
    pathItemEq,
    pathItemOrd
};
