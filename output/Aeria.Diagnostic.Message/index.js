// Generated by purs version 0.15.15
import * as Aeria_Semantic_Error from "../Aeria.Semantic.Error/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
var intercalate = /* #__PURE__ */ Data_Array.intercalate(Data_Monoid.monoidString);
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var max = /* #__PURE__ */ Data_Ord.max(Data_Ord.ordInt);
var show1 = /* #__PURE__ */ Data_Show.show(Aeria_Semantic_Error.showSemanticError);
var DiagnosticSyntaxError = /* #__PURE__ */ (function () {
    function DiagnosticSyntaxError(value0) {
        this.value0 = value0;
    };
    DiagnosticSyntaxError.create = function (value0) {
        return new DiagnosticSyntaxError(value0);
    };
    return DiagnosticSyntaxError;
})();
var DiagnosticSemanticError = /* #__PURE__ */ (function () {
    function DiagnosticSemanticError(value0) {
        this.value0 = value0;
    };
    DiagnosticSemanticError.create = function (value0) {
        return new DiagnosticSemanticError(value0);
    };
    return DiagnosticSemanticError;
})();
var Diagnostic = /* #__PURE__ */ (function () {
    function Diagnostic(value0) {
        this.value0 = value0;
    };
    Diagnostic.create = function (value0) {
        return new Diagnostic(value0);
    };
    return Diagnostic;
})();
var ppSourceCode = function (lines) {
    return intercalate("\x0a")(map(function (l) {
        return "| " + l;
    })(lines));
};
var ppPosition = function (span) {
    return function (filepath) {
        return intercalate("")([ "--> ", filepath, ":", show(span.value0.value1), ":", show(span.value0.value2), " - ", show(span.value1.value1), ":", show(span.value1.value2), " (line ", show(span.value0.value1), ", column ", show(span.value0.value2), " - ", "line ", show(span.value1.value1), ", column ", show(span.value1.value2), ") " ]);
    };
};
var ppMessage = function (span) {
    return function (message) {
        return intercalate("")([ "| ", intercalate("")(Data_Array.replicate(span.value0.value2 - 1 | 0)(" ")), intercalate("")(Data_Array.replicate(max(span.value1.value0 - span.value0.value0 | 0)(1))("^")), " " + message, "\x0a|" ]);
    };
};
var getLines = function (str) {
    return Data_String_Common.split("\x0a")(str);
};
var getSourceCode = function (source) {
    return function (startLine) {
        return function (endLine) {
            var startLine$prime = max(startLine - 4 | 0)(0);
            var lines = getLines(source);
            var $29 = startLine$prime >= 0 && endLine < Data_Array.length(lines);
            if ($29) {
                return Data_Array.slice(startLine$prime)(endLine)(lines);
            };
            return [  ];
        };
    };
};
var ppDiagnostic = function (v) {
    var message = (function () {
        if (v.value0.info instanceof DiagnosticSyntaxError) {
            return v.value0.info.value0.value0;
        };
        if (v.value0.info instanceof DiagnosticSemanticError) {
            return show1(v.value0.info.value0);
        };
        throw new Error("Failed pattern match at Aeria.Diagnostic.Message (line 46, column 7 - line 48, column 46): " + [ v.value0.info.constructor.name ]);
    })();
    var above = getSourceCode(v.value0.source)(v.value0.span.value0.value1)(v.value0.span.value1.value1);
    return intercalate("\x0a")([ ppPosition(v.value0.span)(v.value0.filepath), ppSourceCode(above), ppMessage(v.value0.span)(message) ]);
};
export {
    Diagnostic,
    DiagnosticSyntaxError,
    DiagnosticSemanticError,
    ppDiagnostic
};
