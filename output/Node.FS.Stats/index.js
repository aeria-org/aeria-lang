// Generated by purs version 0.15.15
import * as $foreign from "./foreign.js";
import * as Data_JSDate from "../Data.JSDate/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Partial_Unsafe from "../Partial.Unsafe/index.js";
var uid = function (s) {
    return $foreign.uidImpl(s);
};
var statusChangedTimeMs = function (s) {
    return $foreign.statusChangedTimeMsImpl(s);
};
var statusChangedTime = function (s) {
    var v = Data_JSDate.toDateTime($foreign.statusChangedTimeImpl(s));
    if (v instanceof Data_Maybe.Just) {
        return v.value0;
    };
    if (v instanceof Data_Maybe.Nothing) {
        return Partial_Unsafe.unsafeCrashWith("Impossible: `statusChangedTime` returned invalid DateTime value.");
    };
    throw new Error("Failed pattern match at Node.FS.Stats (line 181, column 23 - line 183, column 98): " + [ v.constructor.name ]);
};
var size = function (s) {
    return $foreign.sizeImpl(s);
};
var showStats = {
    show: function (s) {
        return "Stats " + $foreign.showStatsObj(s);
    }
};
var rdev = function (s) {
    return $foreign.rdevImpl(s);
};
var nlink = function (s) {
    return $foreign.nlinkImpl(s);
};
var modifiedTimeMs = function (s) {
    return $foreign.modifiedTimeMsImpl(s);
};
var modifiedTime = function (s) {
    var v = Data_JSDate.toDateTime($foreign.modifiedTimeImpl(s));
    if (v instanceof Data_Maybe.Just) {
        return v.value0;
    };
    if (v instanceof Data_Maybe.Nothing) {
        return Partial_Unsafe.unsafeCrashWith("Impossible: `modifiedTime` returned invalid DateTime value.");
    };
    throw new Error("Failed pattern match at Node.FS.Stats (line 174, column 18 - line 176, column 93): " + [ v.constructor.name ]);
};
var mode = function (s) {
    return $foreign.modeImpl(s);
};
var isSymbolicLink = function (s) {
    return $foreign.isSymbolicLinkImpl(s);
};
var isSocket = function (s) {
    return $foreign.isSocketImpl(s);
};
var isFile = function (s) {
    return $foreign.isFileImpl(s);
};
var isFIFO = function (s) {
    return $foreign.isFIFOImpl(s);
};
var isDirectory = function (s) {
    return $foreign.isDirectoryImpl(s);
};
var isCharacterDevice = function (s) {
    return $foreign.isCharacterDeviceImpl(s);
};
var isBlockDevice = function (s) {
    return $foreign.isBlockDeviceImpl(s);
};
var inode = function (s) {
    return $foreign.inodeImpl(s);
};
var gid = function (s) {
    return $foreign.gidImpl(s);
};
var dev = function (s) {
    return $foreign.devImpl(s);
};
var blocks = function (s) {
    return $foreign.blocksImpl(s);
};
var blkSize = function (s) {
    return $foreign.blkSizeImpl(s);
};
var birthtimeMs = function (s) {
    return $foreign.birthtimeMsImpl(s);
};
var birthTime = function (s) {
    var v = Data_JSDate.toDateTime($foreign.birthTimeImpl(s));
    if (v instanceof Data_Maybe.Just) {
        return v.value0;
    };
    if (v instanceof Data_Maybe.Nothing) {
        return Partial_Unsafe.unsafeCrashWith("Impossible: `birthTime` returned invalid DateTime value.");
    };
    throw new Error("Failed pattern match at Node.FS.Stats (line 188, column 15 - line 190, column 90): " + [ v.constructor.name ]);
};
var accessedTimeMs = function (s) {
    return $foreign.accessedTimeMsImpl(s);
};
var accessedTime = function (s) {
    var v = Data_JSDate.toDateTime($foreign.accessedTimeImpl(s));
    if (v instanceof Data_Maybe.Just) {
        return v.value0;
    };
    if (v instanceof Data_Maybe.Nothing) {
        return Partial_Unsafe.unsafeCrashWith("Impossible: `accessedTime` returned invalid DateTime value.");
    };
    throw new Error("Failed pattern match at Node.FS.Stats (line 167, column 18 - line 169, column 93): " + [ v.constructor.name ]);
};
export {
    isFile,
    isDirectory,
    isBlockDevice,
    isCharacterDevice,
    isFIFO,
    isSocket,
    isSymbolicLink,
    dev,
    inode,
    mode,
    nlink,
    uid,
    gid,
    rdev,
    size,
    blkSize,
    blocks,
    accessedTimeMs,
    modifiedTimeMs,
    statusChangedTimeMs,
    birthtimeMs,
    accessedTime,
    modifiedTime,
    statusChangedTime,
    birthTime,
    showStats
};
