// Generated by purs version 0.15.15
import * as Aeria_Diagnostic_Message from "../Aeria.Diagnostic.Message/index.js";
import * as Aeria_Diagnostic_Position from "../Aeria.Diagnostic.Position/index.js";
import * as Aeria_Syntax_Error from "../Aeria.Syntax.Error/index.js";
import * as Aeria_Syntax_Tree from "../Aeria.Syntax.Tree/index.js";
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Lazy from "../Control.Lazy/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_List from "../Data.List/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_String_CodeUnits from "../Data.String.CodeUnits/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_String_Utils from "../Data.String.Utils/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unfoldable from "../Data.Unfoldable/index.js";
import * as Parsing from "../Parsing/index.js";
import * as Parsing_Combinators from "../Parsing.Combinators/index.js";
import * as Parsing_Expr from "../Parsing.Expr/index.js";
import * as Parsing_Language from "../Parsing.Language/index.js";
import * as Parsing_String from "../Parsing.String/index.js";
import * as Parsing_String_Basic from "../Parsing.String.Basic/index.js";
import * as Parsing_Token from "../Parsing.Token/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(Parsing.bindParserT);
var pure = /* #__PURE__ */ Control_Applicative.pure(Parsing.applicativeParserT);
var alt = /* #__PURE__ */ Control_Alt.alt(Parsing.altParserT);
var voidLeft = /* #__PURE__ */ Data_Functor.voidLeft(Parsing.functorParserT);
var map = /* #__PURE__ */ Data_Functor.map(Parsing.functorParserT);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit)(Parsing.bindParserT);
var toUnfoldable = /* #__PURE__ */ Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray);
var applyFirst = /* #__PURE__ */ Control_Apply.applyFirst(Parsing.applyParserT);
var applySecond = /* #__PURE__ */ Control_Apply.applySecond(Parsing.applyParserT);
var fix = /* #__PURE__ */ Control_Lazy.fix(Parsing.lazyParserT);
var choice = /* #__PURE__ */ Parsing_Combinators.choice(Data_Foldable.foldableArray);
var sourcePos = /* #__PURE__ */ bind(Parsing.position)(function (v) {
    return pure(new Aeria_Diagnostic_Position.SourcePos(v.index, v.line, v.column));
});
var runParsers = function (ps) {
    var choice$prime = function (v) {
        if (v.length === 0) {
            return pure(Data_Maybe.Nothing.value);
        };
        var v1 = Data_Array.uncons(v);
        if (v1 instanceof Data_Maybe.Just) {
            return bind(Parsing_Combinators.optionMaybe(v1.value0.head.value1))(function (x) {
                if (x instanceof Data_Maybe.Just) {
                    return pure(new Data_Maybe.Just(new Data_Tuple.Tuple(v1.value0.head.value0, x.value0)));
                };
                if (x instanceof Data_Maybe.Nothing) {
                    return choice$prime(v1.value0.tail);
                };
                throw new Error("Failed pattern match at Aeria.Syntax.Parser (line 714, column 9 - line 716, column 34): " + [ x.constructor.name ]);
            });
        };
        if (v1 instanceof Data_Maybe.Nothing) {
            return pure(Data_Maybe.Nothing.value);
        };
        throw new Error("Failed pattern match at Aeria.Syntax.Parser (line 711, column 5 - line 717, column 30): " + [ v1.constructor.name ]);
    };
    var go$prime = function (v) {
        return function (v1) {
            return function (v2) {
                if (v2 === 0) {
                    return pure(v);
                };
                return bind(choice$prime(v1))(function (maybeResult) {
                    if (maybeResult instanceof Data_Maybe.Just) {
                        return go$prime(Data_Array.snoc(v)(maybeResult.value0))(v1)(v2 - 1 | 0);
                    };
                    if (maybeResult instanceof Data_Maybe.Nothing) {
                        return go$prime(v)(v1)(v2 - 1 | 0);
                    };
                    throw new Error("Failed pattern match at Aeria.Syntax.Parser (line 703, column 5 - line 707, column 36): " + [ maybeResult.constructor.name ]);
                });
            };
        };
    };
    return go$prime([  ])(ps)(Data_Array.length(ps));
};
var lang = /* #__PURE__ */ (function () {
    var aeria = (function () {
        var v = Parsing_Token.unGenLanguageDef(Parsing_Language.emptyDef);
        return {
            opStart: v.opStart,
            opLetter: v.opLetter,
            reservedOpNames: v.reservedOpNames,
            commentStart: "{-",
            commentEnd: "-}",
            commentLine: "--",
            nestedComments: true,
            identStart: Parsing_String_Basic.letter,
            reservedNames: [ "collection", "properties", "required", "str", "bool", "int", "float", "file", "search", "placeholder", "indexes", "filters", "filtersPresets", "component", "enum", "cond", "true", "false" ],
            identLetter: alt(Parsing_String_Basic.alphaNum)(Parsing_String_Basic.oneOf([ "_", "'" ])),
            caseSensitive: true
        };
    })();
    return Parsing_Token.makeTokenParser(aeria);
})();
var pAttributeName = /* #__PURE__ */ bind(sourcePos)(function (begin) {
    return bind(Parsing_String_Basic.lower)(function ($$char) {
        return bind(lang.identifier)(function (rest) {
            return bind(sourcePos)(function (end) {
                return pure(new Aeria_Syntax_Tree.AttributeName(new Aeria_Diagnostic_Position.Span(begin, end), Data_String_Utils.concatChar($$char)(rest)));
            });
        });
    });
});
var pBoolean = /* #__PURE__ */ (function () {
    var pTrue = voidLeft(lang.reserved("true"))(true);
    var pFalse = voidLeft(lang.reserved("false"))(false);
    return alt(pTrue)(pFalse);
})();
var pCollectionOwned = /* #__PURE__ */ (function () {
    return map(Aeria_Syntax_Tree.CollectionOwned.create)(pBoolean);
})();
var pCollectionTimestamps = /* #__PURE__ */ (function () {
    return map(Aeria_Syntax_Tree.CollectionTimestamps.create)(pBoolean);
})();
var pCollectionIcon = /* #__PURE__ */ (function () {
    return map(Aeria_Syntax_Tree.CollectionIcon.create)(lang.stringLiteral);
})();
var pCollectionName = /* #__PURE__ */ bind(sourcePos)(function (begin) {
    return bind(Parsing_String_Basic.upper)(function ($$char) {
        return bind(lang.identifier)(function (rest) {
            return bind(sourcePos)(function (end) {
                return pure(new Aeria_Syntax_Tree.CollectionName(new Aeria_Diagnostic_Position.Span(begin, end), Data_String_Common.toLower(Data_String_Utils.concatChar($$char)(rest))));
            });
        });
    });
});
var pPropertyName = /* #__PURE__ */ bind(sourcePos)(function (begin) {
    return bind(Parsing_String_Basic.lower)(function ($$char) {
        return bind(lang.identifier)(function (rest) {
            return bind(sourcePos)(function (end) {
                return pure(new Aeria_Syntax_Tree.PropertyName(new Aeria_Diagnostic_Position.Span(begin, end), Data_String_Utils.concatChar($$char)(rest)));
            });
        });
    });
});
var pCollectionFunctions = /* #__PURE__ */ (function () {
    var item = bind(sourcePos)(function (begin) {
        return bind(pPropertyName)(function (propertyName) {
            return bind(Parsing_Combinators.optionMaybe(lang.reserved("?")))(function (custom) {
                return bind(sourcePos)(function (end) {
                    return pure(new Aeria_Syntax_Tree.FunctionItem(new Aeria_Diagnostic_Position.Span(begin, end), propertyName, Data_Maybe.isJust(custom)));
                });
            });
        });
    });
    return lang.braces(Parsing_Combinators.many(Parsing_Combinators["try"](item)));
})();
var pGetter = /* #__PURE__ */ bind(sourcePos)(function (begin) {
    return bind(pPropertyName)(function (name) {
        return bind(sourcePos)(function (beginmacro) {
            return discard(lang.reserved("@js (doc) =>"))(function () {
                return bind(Parsing_Combinators.manyTill(Parsing_String.anyChar)(lang.reserved("@end")))(function (code) {
                    return bind(sourcePos)(function (end) {
                        return pure(new Aeria_Syntax_Tree.Getter({
                            span: new Aeria_Diagnostic_Position.Span(begin, end),
                            name: name,
                            macro: new Aeria_Syntax_Tree.Macro(new Aeria_Diagnostic_Position.Span(beginmacro, end), Data_String_CodeUnits.fromCharArray(toUnfoldable(code)))
                        }));
                    });
                });
            });
        });
    });
});
var pCollectionGetters = /* #__PURE__ */ (function () {
    return lang.braces(Parsing_Combinators.many(Parsing_Combinators["try"](pGetter)));
})();
var pListProperty = function (f) {
    var item = bind(sourcePos)(function (begin) {
        return bind(pPropertyName)(function (propertyName) {
            return bind(sourcePos)(function (end) {
                return pure(f(new Aeria_Diagnostic_Position.Span(begin, end))(propertyName));
            });
        });
    });
    return lang.braces(Parsing_Combinators.many(Parsing_Combinators["try"](item)));
};
var pCollectionFilters = /* #__PURE__ */ (function () {
    return pListProperty(Aeria_Syntax_Tree.FilterItem.create);
})();
var pCollectionForm = /* #__PURE__ */ (function () {
    return pListProperty(Aeria_Syntax_Tree.FormItem.create);
})();
var pCollectionImmutable = /* #__PURE__ */ (function () {
    return alt(Parsing_Combinators["try"](map(Aeria_Syntax_Tree.CollectionImmutableBool.create)(pBoolean)))(Parsing_Combinators["try"](map(Aeria_Syntax_Tree.CollectionImmutableList.create)(pListProperty(Aeria_Syntax_Tree.ImmutableItem.create))));
})();
var pCollectionIndexes = /* #__PURE__ */ (function () {
    return pListProperty(Aeria_Syntax_Tree.IndexesItem.create);
})();
var pCollectionPresets = /* #__PURE__ */ (function () {
    return pListProperty(Aeria_Syntax_Tree.PresetItem.create);
})();
var pCollectionTable = /* #__PURE__ */ (function () {
    return pListProperty(Aeria_Syntax_Tree.TableItem.create);
})();
var pCollectionTableMeta = /* #__PURE__ */ (function () {
    return pListProperty(Aeria_Syntax_Tree.TableMetaItem.create);
})();
var pCollectionWritable = /* #__PURE__ */ (function () {
    return pListProperty(Aeria_Syntax_Tree.WritableItem.create);
})();
var pLiteral = /* #__PURE__ */ (function () {
    var pString = bind(sourcePos)(function (begin) {
        return bind(lang.stringLiteral)(function (stringLiteral) {
            return bind(sourcePos)(function (end) {
                return pure(new Aeria_Syntax_Tree.LString(new Aeria_Diagnostic_Position.Span(begin, end), stringLiteral));
            });
        });
    });
    var pProp = bind(sourcePos)(function (begin) {
        return bind(pPropertyName)(function (propertyName) {
            return bind(sourcePos)(function (end) {
                return pure(new Aeria_Syntax_Tree.LProperty(new Aeria_Diagnostic_Position.Span(begin, end), propertyName));
            });
        });
    });
    var pInteger = bind(sourcePos)(function (begin) {
        return bind(lang.integer)(function (integerLiteral) {
            return bind(sourcePos)(function (end) {
                return pure(new Aeria_Syntax_Tree.LInteger(new Aeria_Diagnostic_Position.Span(begin, end), integerLiteral));
            });
        });
    });
    var pFloat = bind(sourcePos)(function (begin) {
        return bind(lang["float"])(function (floatLiteral) {
            return bind(sourcePos)(function (end) {
                return pure(new Aeria_Syntax_Tree.LFloat(new Aeria_Diagnostic_Position.Span(begin, end), floatLiteral));
            });
        });
    });
    var pBoolean$prime = bind(sourcePos)(function (begin) {
        return bind(pBoolean)(function (booleanLiteral) {
            return bind(sourcePos)(function (end) {
                return pure(new Aeria_Syntax_Tree.LBoolean(new Aeria_Diagnostic_Position.Span(begin, end), booleanLiteral));
            });
        });
    });
    var pArray = function (p) {
        var go = Parsing_Combinators.sepBy(applyFirst(applySecond(Parsing_String_Basic.skipSpaces)(p))(Parsing_String_Basic.skipSpaces))(lang.comma);
        return bind(sourcePos)(function (begin) {
            return bind(lang.brackets(go))(function (arrayLiteral) {
                return bind(sourcePos)(function (end) {
                    return pure(new Aeria_Syntax_Tree.LArray(new Aeria_Diagnostic_Position.Span(begin, end), arrayLiteral));
                });
            });
        });
    };
    return fix(function (self) {
        return choice([ Parsing_Combinators["try"](pFloat), Parsing_Combinators["try"](pInteger), Parsing_Combinators["try"](pString), Parsing_Combinators["try"](pBoolean$prime), Parsing_Combinators["try"](pProp), pArray(self) ]);
    });
})();
var pExpr = /* #__PURE__ */ (function () {
    var value = map(Aeria_Syntax_Tree.ELiteral.create)(pLiteral);
    var unary = function (name) {
        return function (fun) {
            var go = discard(lang.reservedOp(name))(function () {
                return pure(fun);
            });
            return new Parsing_Expr.Prefix(go);
        };
    };
    var expr = function (self) {
        return alt(lang.parens(self))(value);
    };
    var binary = function (name) {
        return function (fun) {
            return function (assoc) {
                var go = discard(lang.reservedOp(name))(function () {
                    return pure(fun);
                });
                return new Parsing_Expr.Infix(go, assoc);
            };
        };
    };
    var table = [ [ binary("==")(Aeria_Syntax_Tree.EEq.create)(Parsing_Expr.AssocLeft.value) ], [ binary("in")(Aeria_Syntax_Tree.EIn.create)(Parsing_Expr.AssocLeft.value) ], [ binary(">")(Aeria_Syntax_Tree.EGt.create)(Parsing_Expr.AssocLeft.value), binary("<")(Aeria_Syntax_Tree.ELt.create)(Parsing_Expr.AssocLeft.value), binary(">=")(Aeria_Syntax_Tree.EGte.create)(Parsing_Expr.AssocLeft.value), binary("<=")(Aeria_Syntax_Tree.ELte.create)(Parsing_Expr.AssocLeft.value) ], [ binary("&&")(Aeria_Syntax_Tree.EAnd.create)(Parsing_Expr.AssocLeft.value) ], [ binary("||")(Aeria_Syntax_Tree.EOr.create)(Parsing_Expr.AssocLeft.value) ], [ unary("exists")(Aeria_Syntax_Tree.EExists.create) ], [ unary("!")(Aeria_Syntax_Tree.ENot.create) ] ];
    return fix(function (self) {
        return Parsing_Expr.buildExprParser(table)(expr(self));
    });
})();
var pAttribute = /* #__PURE__ */ bind(sourcePos)(function (begin) {
    return bind(applySecond(Parsing_String.string("@"))(pAttributeName))(function (attributeName) {
        return bind((function () {
            if (attributeName.value1 === "constraints") {
                return bind(sourcePos)(function (beginAttributeValue) {
                    return bind(lang.parens(pExpr))(function (expr) {
                        return bind(sourcePos)(function (endAttributeValue) {
                            return pure(new Aeria_Syntax_Tree.AExpr(new Aeria_Diagnostic_Position.Span(beginAttributeValue, endAttributeValue), expr));
                        });
                    });
                });
            };
            return bind(sourcePos)(function (beginAttributeValue) {
                return bind(lang.parens(pLiteral))(function (literal) {
                    return bind(sourcePos)(function (endAttributeValue) {
                        return pure(new Aeria_Syntax_Tree.ALiteral(new Aeria_Diagnostic_Position.Span(beginAttributeValue, endAttributeValue), literal));
                    });
                });
            });
        })())(function (attributeValue) {
            return bind(sourcePos)(function (end) {
                return pure(new Aeria_Syntax_Tree.Attribute(new Aeria_Diagnostic_Position.Span(begin, end), attributeName, attributeValue));
            });
        });
    });
});
var pCond = /* #__PURE__ */ (function () {
    return discard(lang.reserved("@cond"))(function () {
        return bind(sourcePos)(function (begin) {
            return bind(lang.parens(pExpr))(function (expr) {
                return bind(sourcePos)(function (end) {
                    return pure(new Aeria_Syntax_Tree.Cond(new Aeria_Diagnostic_Position.Span(begin, end), expr));
                });
            });
        });
    });
})();
var pRequired = /* #__PURE__ */ (function () {
    var go = bind(sourcePos)(function (begin) {
        return bind(pPropertyName)(function (propertyName) {
            return bind(Parsing_Combinators.optionMaybe(pCond))(function (cond) {
                return bind(sourcePos)(function (end) {
                    return pure(new Aeria_Syntax_Tree.Required(new Aeria_Diagnostic_Position.Span(begin, end), propertyName, cond));
                });
            });
        });
    });
    return go;
})();
var pCollectionRequired = /* #__PURE__ */ (function () {
    return lang.braces(Parsing_Combinators.many(Parsing_Combinators["try"](pRequired)));
})();
var pPropertyParser = function (key) {
    return function (value) {
        return applySecond(lang.reserved(key))(value);
    };
};
var pCollectionTemporary = /* #__PURE__ */ (function () {
    return lang.braces(bind(pPropertyParser("index")(pPropertyName))(function (index) {
        return bind(pPropertyParser("expireAfterSeconds")(lang.integer))(function (expireAfterSeconds) {
            return pure(new Aeria_Syntax_Tree.CollectionTemporary({
                index: index,
                expireAfterSeconds: expireAfterSeconds
            }));
        });
    }));
})();
var getParserValue = function (key) {
    return function (results) {
        var v = Data_Array.find(function (v1) {
            return v1.value0 === key;
        })(results);
        if (v instanceof Data_Maybe.Just) {
            return new Data_Maybe.Just(v.value0.value1);
        };
        if (v instanceof Data_Maybe.Nothing) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match at Aeria.Syntax.Parser (line 693, column 3 - line 695, column 23): " + [ v.constructor.name ]);
    };
};
var pCollectionFiltersPresets = /* #__PURE__ */ (function () {
    var pLabel = pPropertyParser("name")(lang.stringLiteral);
    var pFilters = pPropertyParser("filters")(bind(sourcePos)(function (begin) {
        return discard(lang.reserved("@mongo"))(function () {
            return bind(Parsing_Combinators.manyTill(Parsing_String.anyChar)(lang.reserved("@end")))(function (code) {
                return bind(sourcePos)(function (end) {
                    return pure(new Aeria_Syntax_Tree.Macro(new Aeria_Diagnostic_Position.Span(begin, end), Data_String_CodeUnits.fromCharArray(toUnfoldable(code))));
                });
            });
        });
    }));
    var pBadgeFunction = pPropertyParser("badgeFunction")(lang.stringLiteral);
    var allParsers = [ new Data_Tuple.Tuple("name", pLabel), new Data_Tuple.Tuple("badgeFunction", pBadgeFunction), new Data_Tuple.Tuple("filters", pFilters) ];
    var pFiltersPresetsItem = function (name) {
        return bind(sourcePos)(function (begin) {
            return bind(runParsers(allParsers))(function (results) {
                var label = getParserValue("name")(results);
                var badgeFunction = getParserValue("badgeFunction")(results);
                var filters = getParserValue("filters")(results);
                return bind(sourcePos)(function (end) {
                    return pure(new Aeria_Syntax_Tree.FiltersPresetsItem({
                        span: new Aeria_Diagnostic_Position.Span(begin, end),
                        label: label,
                        name: name,
                        badgeFunction: badgeFunction,
                        filters: filters
                    }));
                });
            });
        });
    };
    var go = bind(pPropertyName)(function (name) {
        return lang.braces(pFiltersPresetsItem(name));
    });
    return lang.braces(Parsing_Combinators.many(Parsing_Combinators["try"](go)));
})();
var pCollectionLayout = /* #__PURE__ */ (function () {
    var pVerticalSpacing = pPropertyParser("verticalSpacing")(lang["float"]);
    var pSpan = pPropertyParser("span")(lang["float"]);
    var pSeparator = pPropertyParser("separator")(lang.stringLiteral);
    var pLayoutItemComponent = (function () {
        var pProps = pPropertyParser("props")(bind(sourcePos)(function (begin) {
            return discard(lang.reserved("@js () =>"))(function () {
                return bind(Parsing_Combinators.manyTill(Parsing_String.anyChar)(lang.reserved("@end")))(function (code) {
                    return bind(sourcePos)(function (end) {
                        return pure(new Aeria_Syntax_Tree.Macro(new Aeria_Diagnostic_Position.Span(begin, end), Data_String_CodeUnits.fromCharArray(toUnfoldable(code))));
                    });
                });
            });
        }));
        var pName = pPropertyParser("name")(lang.stringLiteral);
        var allParsers$prime = [ new Data_Tuple.Tuple("name", pName), new Data_Tuple.Tuple("props", pProps) ];
        return lang.braces(bind(sourcePos)(function (begin) {
            return bind(runParsers(allParsers$prime))(function (results) {
                var name = getParserValue("name")(results);
                var props = getParserValue("props")(results);
                return bind(sourcePos)(function (end) {
                    return pure(new Aeria_Syntax_Tree.LayoutItemComponent({
                        span: new Aeria_Diagnostic_Position.Span(begin, end),
                        name: name,
                        props: props
                    }));
                });
            });
        }));
    })();
    var pIf = pPropertyParser("if")(pCond);
    var pComponent = pPropertyParser("component")(pLayoutItemComponent);
    var allParsers = [ new Data_Tuple.Tuple("verticalSpacing", pVerticalSpacing), new Data_Tuple.Tuple("span", pSpan), new Data_Tuple.Tuple("component", pComponent), new Data_Tuple.Tuple("separator", pSeparator), new Data_Tuple.Tuple("if", pIf) ];
    var pLayoutItem = function (name) {
        return bind(sourcePos)(function (begin) {
            return bind(runParsers(allParsers))(function (results) {
                var verticalSpacing = getParserValue("verticalSpacing")(results);
                var span_ = getParserValue("span")(results);
                var component = getParserValue("component")(results);
                var separator = getParserValue("separator")(results);
                var if_ = getParserValue("if")(results);
                return bind(sourcePos)(function (end) {
                    return pure(new Aeria_Syntax_Tree.LayoutItem({
                        span: new Aeria_Diagnostic_Position.Span(begin, end),
                        name: name,
                        verticalSpacing: verticalSpacing,
                        span_: span_,
                        component: component,
                        separator: separator,
                        if_: if_
                    }));
                });
            });
        });
    };
    var go = bind(pPropertyName)(function (name) {
        return lang.braces(pLayoutItem(name));
    });
    return lang.braces(Parsing_Combinators.many(Parsing_Combinators["try"](go)));
})();
var pCollectionSearch = /* #__PURE__ */ (function () {
    var pPlaceholder = pPropertyParser("placeholder")(lang.stringLiteral);
    var pIndexs = pPropertyParser("indexes")(lang.braces(Parsing_Combinators.many(Parsing_Combinators["try"](pPropertyName))));
    var allParsers = [ new Data_Tuple.Tuple("indexes", pIndexs), new Data_Tuple.Tuple("placeholder", pPlaceholder) ];
    return lang.braces(bind(runParsers(allParsers))(function (results) {
        var placeholder = getParserValue("placeholder")(results);
        var indexes = getParserValue("indexes")(results);
        return pure(new Aeria_Syntax_Tree.CollectionSearch({
            placeholder: placeholder,
            indexes: Data_Maybe.fromMaybe(Data_List_Types.Nil.value)(indexes)
        }));
    }));
})();
var pCollectionSecurity = /* #__PURE__ */ (function () {
    var pStrategy = pPropertyParser("strategy")(lang.stringLiteral);
    var pScale = pPropertyParser("scale")(lang.integer);
    var pRateLimiting = lang.braces(bind(sourcePos)(function (begin) {
        return bind(runParsers([ new Data_Tuple.Tuple("strategy", pStrategy), new Data_Tuple.Tuple("scale", pScale) ]))(function (results) {
            return bind(sourcePos)(function (end) {
                var strategy = getParserValue("strategy")(results);
                var scale = getParserValue("scale")(results);
                return pure(new Aeria_Syntax_Tree.SecurityRateLimiting({
                    span: new Aeria_Diagnostic_Position.Span(begin, end),
                    strategy: strategy,
                    scale: scale
                }));
            });
        });
    }));
    var pRateLimiting$prime = pPropertyParser("rateLimiting")(pRateLimiting);
    var pLogging = lang.braces(bind(sourcePos)(function (begin) {
        return bind(Parsing_Combinators.optionMaybe(pStrategy))(function (strategy) {
            return bind(sourcePos)(function (end) {
                return pure(new Aeria_Syntax_Tree.SecurityLogging({
                    span: new Aeria_Diagnostic_Position.Span(begin, end),
                    strategy: strategy
                }));
            });
        });
    }));
    var pLogging$prime = pPropertyParser("logging")(pLogging);
    var pSecutiryItem = function (name) {
        return bind(sourcePos)(function (begin) {
            return bind(runParsers([ new Data_Tuple.Tuple("rateLimiting", pRateLimiting$prime), new Data_Tuple.Tuple("logging", pLogging$prime) ]))(function (results) {
                var rateLimiting = getParserValue("rateLimiting")(results);
                var logging = getParserValue("logging")(results);
                return bind(sourcePos)(function (end) {
                    return pure(new Aeria_Syntax_Tree.SecurityItem({
                        span: new Aeria_Diagnostic_Position.Span(begin, end),
                        functionName: name,
                        rateLimiting: rateLimiting,
                        logging: logging
                    }));
                });
            });
        });
    };
    var go = bind(pPropertyName)(function (name) {
        return lang.braces(pSecutiryItem(name));
    });
    return lang.braces(Parsing_Combinators.many(Parsing_Combinators["try"](go)));
})();
var pPropertyType = function (p) {
    var tStr = bind(sourcePos)(function (begin) {
        return bind(lang.reservedOp("str"))(function () {
            return bind(sourcePos)(function (end) {
                return pure(new Aeria_Syntax_Tree.PString(new Aeria_Diagnostic_Position.Span(begin, end)));
            });
        });
    });
    var tObject = lang.braces(bind(sourcePos)(function (begin) {
        return bind(runParsers([ new Data_Tuple.Tuple("required", pPropertyParser("required")(pCollectionRequired)), new Data_Tuple.Tuple("properties", pPropertyParser("properties")(p)) ]))(function (results) {
            var required = getParserValue("required")(results);
            var properties = getParserValue("properties")(results);
            return bind(sourcePos)(function (end) {
                return pure(new Aeria_Syntax_Tree.PObject(new Aeria_Diagnostic_Position.Span(begin, end), Data_Maybe.fromMaybe(Data_List_Types.Nil.value)(required), Data_Maybe.fromMaybe(Data_List_Types.Nil.value)(properties)));
            });
        });
    }));
    var tInt = bind(sourcePos)(function (begin) {
        return bind(lang.reservedOp("int"))(function () {
            return bind(sourcePos)(function (end) {
                return pure(new Aeria_Syntax_Tree.PInteger(new Aeria_Diagnostic_Position.Span(begin, end)));
            });
        });
    });
    var tFloat = bind(sourcePos)(function (begin) {
        return bind(lang.reservedOp("float"))(function () {
            return bind(sourcePos)(function (end) {
                return pure(new Aeria_Syntax_Tree.PFloat(new Aeria_Diagnostic_Position.Span(begin, end)));
            });
        });
    });
    var tEnum = bind(sourcePos)(function (begin) {
        return bind(lang.reservedOp("enum"))(function () {
            return bind(sourcePos)(function (end) {
                return pure(new Aeria_Syntax_Tree.PEnum(new Aeria_Diagnostic_Position.Span(begin, end)));
            });
        });
    });
    var tCollection = bind(sourcePos)(function (begin) {
        return bind(pCollectionName)(function (collectionName) {
            return bind(sourcePos)(function (end) {
                return pure(new Aeria_Syntax_Tree.PRef(new Aeria_Diagnostic_Position.Span(begin, end), collectionName));
            });
        });
    });
    var tBool = bind(sourcePos)(function (begin) {
        return bind(lang.reservedOp("bool"))(function () {
            return bind(sourcePos)(function (end) {
                return pure(new Aeria_Syntax_Tree.PBoolean(new Aeria_Diagnostic_Position.Span(begin, end)));
            });
        });
    });
    var tPrimitives = alt(tStr)(alt(tBool)(alt(tInt)(alt(tFloat)(tEnum))));
    var tArray = function (self) {
        return bind(sourcePos)(function (begin) {
            return bind(Parsing_String.string("[]"))(function () {
                return bind(self)(function (arrType) {
                    return bind(sourcePos)(function (end) {
                        return pure(new Aeria_Syntax_Tree.PArray(new Aeria_Diagnostic_Position.Span(begin, end), arrType));
                    });
                });
            });
        });
    };
    return fix(function (self) {
        return choice([ Parsing_Combinators["try"](tArray(self)), Parsing_Combinators["try"](tPrimitives), Parsing_Combinators["try"](tCollection), Parsing_Combinators["try"](tObject) ]);
    });
};
var pProperty = function (p) {
    return bind(sourcePos)(function (begin) {
        return bind(pPropertyName)(function (name) {
            return bind(pPropertyType(p))(function (type_) {
                return bind(Parsing_Combinators.many(pAttribute))(function (attributes) {
                    return bind(sourcePos)(function (end) {
                        return pure(new Aeria_Syntax_Tree.Property({
                            span: new Aeria_Diagnostic_Position.Span(begin, end),
                            name: name,
                            type_: type_,
                            attributes: attributes
                        }));
                    });
                });
            });
        });
    });
};
var pCollectionProperties = /* #__PURE__ */ fix(function (self) {
    return lang.braces(Parsing_Combinators.many(Parsing_Combinators["try"](pProperty(self))));
});
var pCollection = /* #__PURE__ */ (function () {
    var pCollectionWritable$prime = pPropertyParser("writable")(pCollectionWritable);
    var pCollectionTimestamps$prime = pPropertyParser("timestamps")(pCollectionTimestamps);
    var pCollectionTemporary$prime = pPropertyParser("temporary")(pCollectionTemporary);
    var pCollectionTableMeta$prime = pPropertyParser("tableMeta")(pCollectionTableMeta);
    var pCollectionTable$prime = pPropertyParser("table")(pCollectionTable);
    var pCollectionSecurity$prime = pPropertyParser("security")(pCollectionSecurity);
    var pCollectionSearch$prime = pPropertyParser("search")(pCollectionSearch);
    var pCollectionRequired$prime = pPropertyParser("required")(pCollectionRequired);
    var pCollectionProperties$prime = pPropertyParser("properties")(pCollectionProperties);
    var pCollectionPresets$prime = pPropertyParser("presets")(pCollectionPresets);
    var pCollectionOwned$prime = pPropertyParser("owned")(pCollectionOwned);
    var pCollectionLayout$prime = pPropertyParser("layout")(pCollectionLayout);
    var pCollectionIndexes$prime = pPropertyParser("indeParser")(pCollectionIndexes);
    var pCollectionImmutable$prime = pPropertyParser("immutable")(pCollectionImmutable);
    var pCollectionIcon$prime = pPropertyParser("icon")(pCollectionIcon);
    var pCollectionGetters$prime = pPropertyParser("getters")(pCollectionGetters);
    var pCollectionFunctions$prime = pPropertyParser("functions")(pCollectionFunctions);
    var pCollectionForm$prime = pPropertyParser("form")(pCollectionForm);
    var pCollectionFiltersPresets$prime = pPropertyParser("filtersPresets")(pCollectionFiltersPresets);
    var pCollectionFilters$prime = pPropertyParser("filters")(pCollectionFilters);
    var allParsers = [ new Data_Tuple.Tuple("tableMeta", pCollectionTableMeta$prime), new Data_Tuple.Tuple("properties", pCollectionProperties$prime), new Data_Tuple.Tuple("required", pCollectionRequired$prime), new Data_Tuple.Tuple("filters", pCollectionFilters$prime), new Data_Tuple.Tuple("getters", pCollectionGetters$prime), new Data_Tuple.Tuple("indexes", pCollectionIndexes$prime), new Data_Tuple.Tuple("table", pCollectionTable$prime), new Data_Tuple.Tuple("form", pCollectionForm$prime), new Data_Tuple.Tuple("icon", pCollectionIcon$prime), new Data_Tuple.Tuple("search", pCollectionSearch$prime), new Data_Tuple.Tuple("filtersPresets", pCollectionFiltersPresets$prime), new Data_Tuple.Tuple("layout", pCollectionLayout$prime), new Data_Tuple.Tuple("owned", pCollectionOwned$prime), new Data_Tuple.Tuple("timestamps", pCollectionTimestamps$prime), new Data_Tuple.Tuple("functions", pCollectionFunctions$prime), new Data_Tuple.Tuple("writable", pCollectionWritable$prime), new Data_Tuple.Tuple("immutable", pCollectionImmutable$prime), new Data_Tuple.Tuple("security", pCollectionSecurity$prime), new Data_Tuple.Tuple("presets", pCollectionPresets$prime), new Data_Tuple.Tuple("temporary", pCollectionTemporary$prime) ];
    var pCollection$prime = function (name) {
        return bind(sourcePos)(function (begin) {
            return bind(runParsers(allParsers))(function (results) {
                var properties = getParserValue("properties")(results);
                var required = getParserValue("required")(results);
                var table = getParserValue("table")(results);
                var getters = getParserValue("getters")(results);
                var tableMeta = getParserValue("tableMeta")(results);
                var filters = getParserValue("filters")(results);
                var form = getParserValue("form")(results);
                var indexes = getParserValue("indexes")(results);
                var icon = getParserValue("icon")(results);
                var search = getParserValue("search")(results);
                var filtersPresets = getParserValue("filtersPresets")(results);
                var layout = getParserValue("layout")(results);
                var owned = getParserValue("owned")(results);
                var timestamps = getParserValue("timestamps")(results);
                var functions = getParserValue("functions")(results);
                var writable = getParserValue("writable")(results);
                var immutable = getParserValue("immutable")(results);
                var security = getParserValue("security")(results);
                var presets = getParserValue("presets")(results);
                var temporary = getParserValue("temporary")(results);
                return bind(sourcePos)(function (end) {
                    return pure(new Aeria_Syntax_Tree.Collection({
                        span: new Aeria_Diagnostic_Position.Span(begin, end),
                        name: name,
                        icon: icon,
                        owned: owned,
                        timestamps: timestamps,
                        search: search,
                        immutable: immutable,
                        temporary: temporary,
                        presets: Data_Maybe.fromMaybe(Data_List_Types.Nil.value)(presets),
                        security: Data_Maybe.fromMaybe(Data_List_Types.Nil.value)(security),
                        functions: Data_Maybe.fromMaybe(Data_List_Types.Nil.value)(functions),
                        writable: Data_Maybe.fromMaybe(Data_List_Types.Nil.value)(writable),
                        properties: Data_Maybe.fromMaybe(Data_List_Types.Nil.value)(properties),
                        required: Data_Maybe.fromMaybe(Data_List_Types.Nil.value)(required),
                        table: Data_Maybe.fromMaybe(Data_List_Types.Nil.value)(table),
                        getters: Data_Maybe.fromMaybe(Data_List_Types.Nil.value)(getters),
                        tableMeta: Data_Maybe.fromMaybe(Data_List_Types.Nil.value)(tableMeta),
                        filters: Data_Maybe.fromMaybe(Data_List_Types.Nil.value)(filters),
                        form: Data_Maybe.fromMaybe(Data_List_Types.Nil.value)(form),
                        indexes: Data_Maybe.fromMaybe(Data_List_Types.Nil.value)(indexes),
                        filtersPresets: Data_Maybe.fromMaybe(Data_List_Types.Nil.value)(filtersPresets),
                        layout: Data_Maybe.fromMaybe(Data_List_Types.Nil.value)(layout)
                    }));
                });
            });
        });
    };
    var go = discard(lang.reserved("collection"))(function () {
        return bind(pCollectionName)(function (name) {
            return lang.braces(pCollection$prime(name));
        });
    });
    return go;
})();
var pProgram = /* #__PURE__ */ bind(/* #__PURE__ */ Parsing_Combinators.many(pCollection))(function (collections) {
    return pure(new Aeria_Syntax_Tree.Program({
        collections: collections
    }));
});
var contents = function (p) {
    return applyFirst(applySecond(lang.whiteSpace)(lang.lexeme(p)))(Parsing_String.eof);
};
var runProgram = function (filepath) {
    return function (source) {
        var v = Parsing.runParser(source)(contents(pProgram));
        if (v instanceof Data_Either.Left) {
            return new Data_Either.Left(new Aeria_Diagnostic_Message.Diagnostic({
                filepath: filepath,
                source: source,
                info: new Aeria_Diagnostic_Message.DiagnosticSyntaxError(new Aeria_Syntax_Error["SyntaxError"](v.value0.value0)),
                span: new Aeria_Diagnostic_Position.Span(new Aeria_Diagnostic_Position.SourcePos(v.value0.value1.index, v.value0.value1.line, v.value0.value1.column), new Aeria_Diagnostic_Position.SourcePos(v.value0.value1.index, v.value0.value1.line, v.value0.value1.column))
            }));
        };
        if (v instanceof Data_Either.Right) {
            return new Data_Either.Right(v.value0);
        };
        throw new Error("Failed pattern match at Aeria.Syntax.Parser (line 732, column 3 - line 740, column 35): " + [ v.constructor.name ]);
    };
};
export {
    runProgram
};
