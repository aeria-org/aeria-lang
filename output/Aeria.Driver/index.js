// Generated by purs version 0.15.15
import * as Aeria_Codegen from "../Aeria.Codegen/index.js";
import * as Aeria_Codegen_Javascript_Pretty from "../Aeria.Codegen.Javascript.Pretty/index.js";
import * as Aeria_Codegen_Javascript_Tree from "../Aeria.Codegen.Javascript.Tree/index.js";
import * as Aeria_Codegen_Typescript_Pretty from "../Aeria.Codegen.Typescript.Pretty/index.js";
import * as Aeria_Diagnostic_Message from "../Aeria.Diagnostic.Message/index.js";
import * as Aeria_Semantic from "../Aeria.Semantic/index.js";
import * as Aeria_Syntax_Parser from "../Aeria.Syntax.Parser/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Console from "../Effect.Console/index.js";
import * as Node_Buffer from "../Node.Buffer/index.js";
import * as Node_Encoding from "../Node.Encoding/index.js";
import * as Node_FS_Aff from "../Node.FS.Aff/index.js";
import * as Node_FS_Sync from "../Node.FS.Sync/index.js";
import * as Node_Process from "../Node.Process/index.js";
var pure = /* #__PURE__ */ Control_Applicative.pure(Effect.applicativeEffect);
var for_ = /* #__PURE__ */ Data_Foldable.for_(Effect.applicativeEffect)(Data_List_Types.foldableList);
var writeOutput = function (filePath) {
    return function (fileName) {
        return function (content) {
            return function __do() {
                Effect_Aff.runAff_(function (v) {
                    return pure(Data_Unit.unit);
                })(Node_FS_Aff.mkdir(filePath))();
                var buffer = Node_Buffer.fromString(content)(Node_Encoding.UTF8.value)();
                return Effect_Aff.runAff_(function (v) {
                    return pure(Data_Unit.unit);
                })(Node_FS_Aff.writeFile(filePath + ("/" + fileName))(buffer))();
            };
        };
    };
};
var readSource = function (filePath) {
    return function __do() {
        var content = Node_FS_Sync.readFile(filePath)();
        return Node_Buffer.toString(Node_Encoding.UTF8.value)(content)();
    };
};
var makeExtenssion = function (v) {
    if (v instanceof Aeria_Codegen_Javascript_Tree.CommonJs) {
        return ".js";
    };
    if (v instanceof Aeria_Codegen_Javascript_Tree.EsNext) {
        return ".mjs";
    };
    throw new Error("Failed pattern match at Aeria.Driver (line 35, column 18 - line 37, column 19): " + [ v.constructor.name ]);
};
var compile = function (filepath) {
    return function (outputPath) {
        return function (output) {
            return function __do() {
                var source = readSource(filepath)();
                var program = Aeria_Syntax_Parser.runProgram(filepath)(source);
                if (program instanceof Data_Either.Right) {
                    var v = Aeria_Semantic.runSemantic(filepath)(source)(program.value0);
                    if (v instanceof Data_Either.Right) {
                        return for_(Aeria_Codegen.codegen(program.value0))(function (v1) {
                            return function __do() {
                                writeOutput(outputPath)(v1.value0 + makeExtenssion(output))(Aeria_Codegen_Javascript_Pretty.ppJavascript(output)(v1.value1))();
                                return writeOutput(outputPath)(v1.value0 + ".d.ts")(Aeria_Codegen_Typescript_Pretty.ppTypescript(v1.value2))();
                            };
                        })();
                    };
                    if (v instanceof Data_Either.Left) {
                        Effect_Console.log(Aeria_Diagnostic_Message.ppDiagnostic(v.value0))();
                        return Node_Process["exit$prime"](1)();
                    };
                    throw new Error("Failed pattern match at Aeria.Driver (line 45, column 7 - line 54, column 18): " + [ v.constructor.name ]);
                };
                if (program instanceof Data_Either.Left) {
                    Effect_Console.log(Aeria_Diagnostic_Message.ppDiagnostic(program.value0))();
                    return Node_Process["exit$prime"](1)();
                };
                throw new Error("Failed pattern match at Aeria.Driver (line 43, column 3 - line 57, column 14): " + [ program.constructor.name ]);
            };
        };
    };
};
export {
    writeOutput,
    readSource,
    makeExtenssion,
    compile
};
