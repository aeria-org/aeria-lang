// Generated by purs version 0.15.15
import * as $foreign from "./foreign.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Nullable from "../Data.Nullable/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Effect from "../Effect/index.js";
import * as Node_Buffer_Types from "../Node.Buffer.Types/index.js";
import * as Node_Encoding from "../Node.Encoding/index.js";
import * as Partial_Unsafe from "../Partial.Unsafe/index.js";
var show = /* #__PURE__ */ Data_Show.show(Node_Buffer_Types.showBufferValueType);
var mapFlipped = /* #__PURE__ */ Data_Functor.mapFlipped(Effect.functorEffect);
var show1 = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var toString$prime = function (enc) {
    return function (start) {
        return function (end) {
            return function (buf) {
                return $foreign.toStringSubImpl(enc, start, end, buf);
            };
        };
    };
};
var toString = function (enc) {
    return function (buf) {
        return $foreign.toStringImpl(Node_Encoding.encodingToNode(enc), buf);
    };
};
var slice = function (start) {
    return function (end) {
        return function (buf) {
            return $foreign.sliceImpl(start, end, buf);
        };
    };
};
var showBuffer = {
    show: $foreign.showImpl
};
var readString = function (enc) {
    return function (start) {
        return function (end) {
            return function (buf) {
                return $foreign.readStringImpl(Node_Encoding.encodingToNode(enc), start, end, buf);
            };
        };
    };
};
var read = function (ty) {
    return function (off) {
        return function (buf) {
            return $foreign.readImpl(show(ty), off, buf);
        };
    };
};
var getAtOffset = function (off) {
    return function (buf) {
        return Data_Nullable.toMaybe($foreign.getAtOffsetImpl(off, buf));
    };
};
var fromString = function (str) {
    return function (enc) {
        return $foreign.fromStringImpl(str, Node_Encoding.encodingToNode(enc));
    };
};
var eqBuffer = {
    eq: function (a) {
        return function (b) {
            return $foreign.eqImpl(a, b);
        };
    }
};
var ordBuffer = {
    compare: function (a) {
        return function (b) {
            var v = $foreign.compareImpl(a, b);
            if (v < 0) {
                return Data_Ordering.LT.value;
            };
            if (v > 0) {
                return Data_Ordering.GT.value;
            };
            return Data_Ordering.EQ.value;
        };
    },
    Eq0: function () {
        return eqBuffer;
    }
};
var create = $foreign.alloc;
var concat$prime = function (a) {
    return function (i) {
        return $foreign.concatToLength(a, i);
    };
};
var compareParts = function (src) {
    return function (target) {
        return function (targetStart) {
            return function (targetEnd) {
                return function (sourceStart) {
                    return function (sourceEnd) {
                        return mapFlipped(function () {
                            return $foreign.comparePartsImpl(src, target, targetStart, targetEnd, sourceStart, sourceEnd);
                        })(function (v) {
                            if (v === -1) {
                                return Data_Ordering.LT.value;
                            };
                            if (v === 0) {
                                return Data_Ordering.EQ.value;
                            };
                            if (v === 1) {
                                return Data_Ordering.GT.value;
                            };
                            return Partial_Unsafe.unsafeCrashWith("Impossible: Invalid value: " + show1(v));
                        });
                    };
                };
            };
        };
    };
};
export {
    alloc,
    fromArray,
    fromArrayBuffer,
    toArray,
    toArrayBuffer,
    concat,
    size
} from "./foreign.js";
export {
    compareParts,
    create,
    fromString,
    read,
    readString,
    toString,
    toString$prime,
    getAtOffset,
    concat$prime,
    slice,
    showBuffer,
    eqBuffer,
    ordBuffer
};
