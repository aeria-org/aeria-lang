// Generated by purs version 0.15.15
import * as Aeria_Diagnostic_Message from "../Aeria.Diagnostic.Message/index.js";
import * as Aeria_Syntax_Parser from "../Aeria.Syntax.Parser/index.js";
import * as Aeria_Syntax_Tree from "../Aeria.Syntax.Tree/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Node_Buffer from "../Node.Buffer/index.js";
import * as Node_Encoding from "../Node.Encoding/index.js";
import * as Node_FS_Stats from "../Node.FS.Stats/index.js";
import * as Node_FS_Sync from "../Node.FS.Sync/index.js";
import * as Test_Spec from "../Test.Spec/index.js";
import * as Test_Spec_Assertions from "../Test.Spec.Assertions/index.js";
import * as Test_Spec_Reporter_Console from "../Test.Spec.Reporter.Console/index.js";
import * as Test_Spec_Runner from "../Test.Spec.Runner/index.js";
var show = /* #__PURE__ */ Data_Show.show(Aeria_Syntax_Tree.showProgram);
var filterA = /* #__PURE__ */ Data_Array.filterA(Effect.applicativeEffect);
var nub = /* #__PURE__ */ Data_Array.nub(Data_Ord.ordString);
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var traverse = /* #__PURE__ */ Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect);
var describe = /* #__PURE__ */ Test_Spec.describe(Data_Identity.monadIdentity);
var for_ = /* #__PURE__ */ Data_Foldable.for_(/* #__PURE__ */ Test_Spec.applicativeSpecT(Data_Identity.applicativeIdentity))(Data_Foldable.foldableArray);
var Program = /* #__PURE__ */ (function () {
    function Program(value0) {
        this.value0 = value0;
    };
    Program.create = function (value0) {
        return new Program(value0);
    };
    return Program;
})();
var sanitize = function (str) {
    return Data_String_Common.joinWith("")(Data_String_Common.split("\x0a")(Data_String_Common.joinWith("")(Data_String_Common.split(" ")(str))));
};
var test = function (dictMonad) {
    var it = Test_Spec.it(dictMonad)(Test_Spec.exampleMUnit);
    return function (dictMonadThrow) {
        var fail = Test_Spec_Assertions.fail(dictMonadThrow);
        var shouldEqual = Test_Spec_Assertions.shouldEqual(dictMonadThrow)(Data_Show.showString)(Data_Eq.eqString);
        return function (name) {
            return function (schema) {
                return function (golden) {
                    return it(name)((function () {
                        var program = Aeria_Syntax_Parser.runProgram("<stdin>")(schema);
                        if (program instanceof Data_Either.Left) {
                            return fail(Aeria_Diagnostic_Message.ppDiagnostic(program.value0));
                        };
                        if (program instanceof Data_Either.Right) {
                            return shouldEqual(sanitize(show(program.value0)))(sanitize(golden));
                        };
                        throw new Error("Failed pattern match at Test.Main (line 65, column 5 - line 67, column 79): " + [ program.constructor.name ]);
                    })());
                };
            };
        };
    };
};
var test1 = /* #__PURE__ */ test(Data_Identity.monadIdentity)(Effect_Aff.monadThrowAff);
var readFile = function (filePath) {
    return function __do() {
        var content = Node_FS_Sync.readFile(filePath)();
        return Node_Buffer.toString(Node_Encoding.UTF8.value)(content)();
    };
};
var isFile$prime = function (dir) {
    return function (entry) {
        return function __do() {
            var stats = Node_FS_Sync.stat(dir + ("/" + entry))();
            return Node_FS_Stats.isFile(stats);
        };
    };
};
var getPrograms = function (dir) {
    return function __do() {
        var entries = Node_FS_Sync.readdir(dir)();
        var files = filterA(isFile$prime(dir))(entries)();
        return nub(map(function (file) {
            return Data_Maybe.fromMaybe("")(Data_Array.head(Data_String_Common.split(".")(file)));
        })(files));
    };
};
var readPrograms = function (path) {
    return function __do() {
        var programs = getPrograms(path)();
        return traverse(function (program) {
            var schemaName = program + ".schema";
            var goldenName = program + ".golden";
            return function __do() {
                var schema = readFile(path + ("/" + schemaName))();
                var golden = readFile(path + ("/" + goldenName))();
                return new Program({
                    name: program,
                    schema: schema,
                    golden: golden
                });
            };
        })(programs)();
    };
};
var main = function __do() {
    var programs = readPrograms("./test/Suite/Syntax")();
    return Effect_Aff.launchAff_(Test_Spec_Runner.runSpec([ Test_Spec_Reporter_Console.consoleReporter ])(describe("Syntax/Parser")(for_(programs)(function (v) {
        return test1(v.value0.name)(v.value0.schema)(v.value0.golden);
    }))))();
};
export {
    Program,
    getPrograms,
    isFile$prime,
    readFile,
    readPrograms,
    sanitize,
    test,
    main
};
